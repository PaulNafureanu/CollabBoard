How about this Room State:

/**
 * General validators
 */

export const Id = z.coerce.number().int().positive();
export const MsEpoch = z.coerce.number().int().nonnegative();
const PosNumber = z.coerce.number().nonnegative();
const Name = z.string().trim().min(1).max(64);
const Role = z.enum(Object.values(PrismaRole));

const RoomMember = z.object({
  userId: Id,
  username: Name,
  role: Role,
  isOnline: z.boolean(),
});

const Cursor = z.object({
  userId: Id,
  x: PosNumber,
  y: PosNumber,
  at: MsEpoch,
});

const Message = z.object({
  id: Id,
  userId: Id,
  username: Name,
  text: z.string().trim().min(1),
  at: MsEpoch,
});

const BoardState = z.object({
  id: Id,
  boardId: Id,
  boardName: Name,
  version: Id,
  payload: z.json(),
});

const RoomState = z.object({
  roomId: Id,
  userId: Id,
  members: z.array(RoomMember),
  cursors: z.array(Cursor),
  messages: z.array(Message),
  boardState: BoardState,
});


Now in the future, for let's say CursorMove or ChatMessage, I want just to make z combine the fields of Cursor or Message with the additional field of roomId:Id. But above what do you think? Note that board state, it is not the patch one, but the current full combined payload in redis that at a set time it is persisted in db.