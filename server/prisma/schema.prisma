// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  // Initially, the creator of the room. Full privileges: can edit board, manage members,
  // delete messages, and close the room. Multiple owners per room allowed.
  OWNER

  // Elevated editor(s) who can moderate: add/suspend/upgrade/downgrade/remove
  // members & messages, but cannot delete the room or change OWNER / PEER's roles.
  MODERATOR

  // Standard member(s) who can edit the shared board (draw, add elements, etc.),
  // and also send chat messages.
  EDITOR

  // Basic member(s) who can participate in chat but cannot modify the board.
  MEMBER

  // Read-only participants: can view board and messages but cannot interact.
  VIEWER
}

model User {
  id       Int     @id @default(autoincrement())
  username String? @unique @db.VarChar(64) // Autogenerated by the server using `User${id}` pattern. Can be changed later by the user.
  email    String? @unique @db.VarChar(255)
  pwdHash  String? @db.VarChar(255)

  isAnonymous Boolean  @default(true)
  createdAt   DateTime @default(now())

  memberships Membership[]
  messages    Message[]
}

model Room {
  id        Int      @id @default(autoincrement())
  slug      String?  @unique @db.VarChar(64) // Autogenerated by the server using `Room${id}` pattern. Can be changed later by the owner.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // There is one-to-one relation between a room and a active board state. There is always 1 active board in the room.
  activeBoardId      Int? @unique
  activeBoardStateId Int? @unique

  activeBoard      Board?      @relation("ActiveBoard", fields: [activeBoardId], references: [id], onDelete: SetNull)
  activeBoardState BoardState? @relation("ActiveBoardState", fields: [activeBoardStateId], references: [id], onDelete: SetNull)

  memberships Membership[]
  messages    Message[]
  boards      Board[]

  // @@unique([activeBoardId, activeBoardVersion])
}

model Membership {
  userId   Int
  roomId   Int
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([userId, roomId])
  @@index([roomId])
  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  roomId    Int
  userId    Int?
  author    String
  text      String   @db.Text
  createdAt DateTime @default(now())

  room Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([roomId])
  @@index([roomId, createdAt])
}

model Board {
  id        Int      @id @default(autoincrement())
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room      Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  activeFor Room? @relation("ActiveBoard")

  states BoardState[]

  @@index([roomId])
  @@index([roomId, updatedAt])
}

model BoardState {
  id        Int      @id @default(autoincrement())
  boardId   Int
  version   Int      @default(1)
  payload   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board     Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  activeFor Room? @relation("ActiveBoardState")

  @@unique([boardId, version])
  @@index([boardId])
  @@index([boardId, version])
  @@index([boardId, updatedAt])
}
